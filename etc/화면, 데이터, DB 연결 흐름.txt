## 💡 화면 연결 흐름(View - html)    
    - 클라이언트(Chrome) > request > Controller(안내소) > View(.html) > response > 클라이언트(Chrome)
    
    a. Controller 설정 
        - Sailing/src/main/java/com/boot/sailing/controller/HomeCon.java
  
            @Controller
            public class HomeCon {

                // URL에서 localhost/home로 들어오면
                @GetMapping("/home")
                public String doHome() {
                    return "/home/home"; // template > home > home.html 화면을 보여줌
                }
            }
        
    b. html 설정
        - /Sailing/src/main/resources/templates/home/home.html
            - <a href="/home/home.html">Home</a> 👉 <a href="/home">Home</a> 변경
                    
## 💡 데이터 연결 흐름(Backend 👉 View(Thymeleaf)에 데이터 주기)    
    - 클라이언트(Chrome) > request > Controller(안내소) > Data, Model > View(Thymeleaf) > 
        response > 클라이언트(Chrome)

    a. MenuCon.java
        @GetMapping("/menu")
            public String doHome(Model model) {

            // Data Create - List, Map
            List<Map<String, Object>> list = new ArrayList<>();
            Map<String, Object> map = new HashMap<>();

            map.put("no", "1");
            map.put("coffee", "아이스아메리카노");
            map.put("kind", "커피");
            map.put("price", "5,000");
            map.put("reg_day", "2020.10.29");
            map.put("mod_day", "2021.10.29");
            list.add(map);

            // Data 전송 - Model
            model.addAttribute("list", list);
            model.addAttribute("hello", "========== MenuCon ==========");

            return "/menu/menu"; 
        }    
    
    b. Thymeleaf - Menu.html
        * <html lang="ko"  xmlns:th="http://www.thymeleaf.org">
            
        a. variable import 
            - <h3>[ Coffee menu Management <span style="font-size:30px;">&#9749;</span> ] <th:block th:text="${hello}"></th:block>  </h3>

        b. for loop
            <!--MenuCon에 list에 넣은 값을 호출 -->
            <!-- Thymeleaf - for loop -->      
            <tr th:each="prod : ${list}">
                <td>Chk</td>
                <td th:text="${prod.get('no')}">커피No</th>
                <td th:text="${prod.get('coffee')}">메뉴명</td>
                <td th:text="${prod.get('kind')}">종류</td>
                <td th:text="${prod.get('price')}">가격</td>
                <td th:text="${prod.get('reg_day')}">등록일</td>
                <td th:text="${prod.get('mod_day')}">수정일</td>
                <td>수정</td>
                <td>삭제</td>
            </tr>
            
## 💡 데이터 연결 흐름 - DI/Ioc(Controller > Service)    
    - 클라이언트(Chrome) > request > Controller(안내소) > Service(로그인 처리, 실제 업무처리) > Controller(안내소)
    
    a. Controller
        - /src/main/java/com/boot/sailing/controller/MenuCon.java
        
            @Autowired
            MenuSvc menuSvc;
            
            @GetMapping("/menu")
            public String doMenu(Model model) {

                // List<Map<String, Object>> list = new MenuSvc().doList(); // MenuSvc.java에서 새로운 객체를 생성하여 doList 메소드 호출 
                List<Map<String, Object>> list = menuSvc.doList(); // MenuSvc에 @Service로 Bean을 등록한 것을 주입(Injection)을 통해 사용

                model.addAttribute("list", list);
                model.addAttribute("hello", "========== MenuCon ==========");

                return "/menu/menu"; 
            }  
            
    * Controller에서 만들었던 업무 로직을 Service로 뺌
    
    b. Service
        - /src/main/java/com/boot/sailing/service/MenuSvc.java
        
            package com.boot.sailing.service;

            import java.util.ArrayList;
            import java.util.HashMap;
            import java.util.List;
            import java.util.Map;

            import org.springframework.stereotype.Service;

            import lombok.extern.log4j.Log4j2;

            @Service 
            @Log4j2
            public class MenuSvc {
                
                public MenuSvc() {
                    log.info("================ MenuSvc , 생성자 ===================");
                }
                
                // Data Create - List, Map
                public List<Map<String, Object>> doList() {
                    List<Map<String, Object>> list = new ArrayList<>();
                    Map<String, Object> map = new HashMap<>();

                    map.put("no", "1");
                    map.put("coffee", "아이스아메");
                    map.put("kind", "커피");
                    map.put("price", "5,000");
                    map.put("reg_day", "2020.10.29");
                    map.put("mod_day", "2021.10.29");
                    list.add(map);

                    Map<String, Object> map2 = new HashMap<>();

                    map2.put("no", "2");
                    map2.put("coffee", "카푸치노");
                    map2.put("kind", "커피");
                    map2.put("price", "6,000");
                    map2.put("reg_day", "2020.10.29");
                    map2.put("mod_day", "2021.10.29");
                    list.add(map2);
                    
                    Map<String, Object> map3 = new HashMap<>();

                    map3.put("no", "3");
                    map3.put("coffee", "카푸치노");
                    map3.put("kind", "커피");
                    map3.put("price", "6,000");
                    map3.put("reg_day", "2020.10.29");
                    map3.put("mod_day", "2021.10.29");
                    list.add(map3);
                    
                    log.info(list);

                    return list;
                }
            }
            
                            
## 💡 데이터베이스 DB 연동(Controller > Service > Dao > DBMS(MariaDB))
    - 클라이언트(Chrome) > request > Controller(안내소) > Service(로그인 처리, 실제 업무처리) >  Dao(Data 처리) > DBMS(MyBatis - MariaDB)
    
    a. Service
        - /src/main/java/com/boot/sailing/service/MenuSvc.java
        
            @Autowired
            MenuDao menuDao;
            
            public List<Map<String, Object>> doList() {

                List<Map<String, Object>> list = menuDao.doList();
                
                log.info(list);
                return list;    
            }
    
    b. Dao    
        - /src/main/java/com/boot/sailing/dao/MenuDao.java
        
            package com.boot.sailing.dao;

            import java.util.List;
            import java.util.Map;

            import org.apache.ibatis.annotations.Mapper;

            @Mapper
            public interface MenuDao {

                List<Map<String, Object>> doList();
            }
    
    c. sqlmapper
        - /src/main/resources/sqlmapper/CoffeeMenu.xml
        
            <?xml version="1.0" encoding="UTF-8" ?>
            <!DOCTYPE mapper
              PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
              "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
              
            <!-- namespace = Dao 위치 -->  
            <mapper namespace="com.boot.sailing.dao.MenuDao">

                <!-- 메뉴 조회 -->
                <!-- id는 Dao의 메소드 이름: doList -->
                <!-- resultType는 Dao의 type: map -->
                <!-- List<Map<String, Object>> doList(); 에서 type은 map -->
                <select id="doList" resultType="map">
                    SELECT no, coffee, kind, price,
                        DATE_FORMAT(reg_day, '%Y-%m-%d') AS reg_day,
                        DATE_FORMAT(mod_day, '%Y-%m-%d') AS mod_day
                        FROM coffee_menu;
                </select>
              
            </mapper>
            
    * application.yml
        - /src/main/resources/application.yml
        
            # Configuration mybatis
            mybatis:
              mapper-locations: sqlmapper/**/*.xml
              configuration: 
                map-underscore-to-camel-case: true
                
    * build.gradle
        - implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
		
