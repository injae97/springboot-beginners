## 💡 [SELECT] - 메뉴 전체 조회 

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 커피 메뉴 클릭 시 전체 조회

				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
				  <td>Chk</td>
				  <td th:text="${prod.get('no')}">커피No</th>
				  <td th:text="${prod.get('coffee')}">메뉴명</td>
				  <td th:text="${prod.get('kind')}">종류</td>
				  <td th:text="${prod.get('price')}">가격</td>
				  <td th:text="${prod.get('reg_day')}">등록일</td>
				  <td th:text="${prod.get('mod_day')}">수정일</td>
				  <td><a th:href="@{/menu_up(no=${prod.get('no')})}">수정</a></td>
				  <td><a th:href="@{/menu_del(no=${prod.get('no')})}">삭제</a></td>
				</tr>
		   
		   
	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
		
			// @Autowired를 통해 주입 받음
			@Autowired
			MenuSvc menuSvc;
			
			/*
			* [SELECT] - 검색 기능(Search)
			* 해당 검색 결과만 받기 위하여 List<Map<String, Object>> list 사용
			*/
			@GetMapping("/menu")
			public String doMenu(Model model) {

				// List<Map<String, Object>> list = new MenuSvc().doList(); // MenuSvc.java에서 새로운 객체를 생성하여 doList 메소드 호출 
				List<Map<String, Object>> list = menuSvc.doList(); // MenuSvc에 @Service로 Bean을 등록한 것을 @Autowired를 통해 주입(Injection) 받아 사용

				model.addAttribute("list", list);
				model.addAttribute("hello", "========== MenuCon ==========");

				return "/menu/menu"; 
			}  
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
			
			
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [SELECT] - 메뉴 전체 조회  */
			public List<Map<String, Object>> doList() {

				List<Map<String, Object>> list = menuDao.doList();
				
				log.info(list);
				return list;    
			}
			
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java

			@Mapper
			public interface MenuDao {

				/* [SELECT] - 메뉴 전체 조회  */
				List<Map<String, Object>> doList();
				
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [SELECT] - 메뉴 전체 조회 -->
			<!-- id는 Dao의 메소드 이름: doList -->
			<!-- resultType는 Dao의 type: map -->
			<!-- List<Map<String, Object>> doList(); 에서 type은 map -->
			<select id="doList" resultType="map">
				SELECT no, coffee, kind, price,
					DATE_FORMAT(reg_day, '%Y-%m-%d') AS reg_day,
					DATE_FORMAT(mod_day, '%Y-%m-%d') AS mod_day
					FROM coffee_menu;
			</select>

    
## 💡 [INSERT] - 메뉴 등록 

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 등록하기 버튼 클릭 시 href에 화면단 경로로 수정
				<!-- 메뉴 등록, href에 화면단 경로 지정(/templates/menu/menu_ins.html) -->
				&nbsp;&nbsp;<button style="width: 80px;height: 30px;font-weight: bold; font-size: medium"><a href="/menu_ins">등록</a></button>
			
		b. /src/main/resources/templates/menu/menu_ins.html
			- 등록하기 입력 form 
				<!-- Post 방식으로 받으며 action에 Controller Mapping 값으로 설정(/src/main/java/com/boot/sailing/controller/MenuCon.java) -->
				<!-- name들은 데이터베이스에서 지정한 컬럼 값 그대로 사용해야 함 -->
				<form name="fm_menu_ins" autocomplete="on" action="/menu_ins" method="post">
				  <fieldset>
			
					<legend> [커피 메뉴 등록] </legend>
					<label>메뉴명</label> <input type="text" id="coffee" name="coffee"></p>
					<label>종 류 </label><select name="kind">
										<option value="커피">커피</option>
										<option value="논커피">논커피</option>
										<option value="에이드">에이드</option>
									  </select>
									  </p>
					&nbsp;&nbsp;
					<label>가 격 </label><input type="number" name="price"></p>
			
					<input type="submit" value="메뉴 등록" style="width: 100px;height: 30px;font-weight: bold; font-size: medium">
				  </fieldset>
				</form>
		
		
	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
		
			/*
			 * [INSERT] - 메뉴 등록 1 
			 * 화면 이동이기 때문에 @GetMapping 사용
			 * localhost:8080/menu_ins로 들어오면 /menu/menu_ins.html 화면을 보여줌
			 */
			@GetMapping("/menu_ins")
			public String doInsert() {
				return "/menu/menu_ins";
			}
			
			/* [INSERT] - 메뉴 등록 2 */
			@PostMapping("/menu_ins")
			public String doInsertPost(
					@RequestParam("coffee") String strCoffee, 
					@RequestParam("kind") String strKind, 
					@RequestParam("price") String strPrice )    
			{
				log.info("==========================================================");
				log.info(strCoffee);
				int intI = menuSvc.doInsert(strCoffee, strKind, strPrice);
				return "redirect:/menu"; // return은 @RequestMapping이 적용되지 않는다.
			}
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
			
			
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [INSERT] - 메뉴 등록 */
			public int doInsert(String strCoffee, String strKind, String strPrice) {
				int intI = menuDao.doInsert(strCoffee, strKind, strPrice);
				return intI;
			}   
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java

			@Mapper
			public interface MenuDao {

				List<Map<String, Object>> doList();
				
				/* [INSERT] - 메뉴 등록 */
				int doInsert(@Param("strCoffee") String coffee, @Param("strKind")  String kind, @Param("strPrice")  String price);
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [INSERT] - 메뉴 등록  -->
			<!-- id는 Dao의 메소드 이름: doInsert -->
			<insert id="doInsert">
				INSERT INTO coffee_menu (coffee, kind, price)
				VALUES(#{strCoffee}, #{strKind}, CAST(#{strPrice} as INTEGER))
			</insert>
            
			
## 💡 [DELETE] - 메뉴 삭제

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 삭제 클릭 시 href에 /menu_del?no=1 받게 설정
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
				  <td>Chk</td>
				  <td th:text="${prod.get('no')}">커피No</th>
				  <td th:text="${prod.get('coffee')}">메뉴명</td>
				  <td th:text="${prod.get('kind')}">종류</td>
				  <td th:text="${prod.get('price')}">가격</td>
				  <td th:text="${prod.get('reg_day')}">등록일</td>
				  <td th:text="${prod.get('mod_day')}">수정일</td>
				  <td>수정</td>
				  <td><a th:href="@{/menu_del(no=${prod.get('no')})}">삭제</a></td>
				</tr>


	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
		
			/* [DELETE] - 메뉴 삭제 */
			@GetMapping("/menu_del")
			public String doDelete(@RequestParam("no") String strNo) {
				log.info("==========================================================");
				log.info("strNo:" + strNo);
				
				int intI = menuSvc.doDelete(strNo);

				return "redirect:/menu"; // return은 @RequestMapping이 적용되지 않는다.
			}            
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
		 
		 
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [DELETE] - 메뉴 삭제 */
			public int doDelete(String strNo) {
				int intI = menuDao.doDelete(strNo);
				return intI;
			}    
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java
		
			@Mapper
			public interface MenuDao {

				List<Map<String, Object>> doList();
				
				/* [DELETE] - 메뉴 삭제 */
				int doDelete(String strNo);
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [DELETE] - 메뉴 삭제  -->
			<!-- id는 Dao의 메소드 이름: doDelete -->
			<delete id="doDelete">
				DELETE FROM coffee_menu where no = CAST(#{strNo} as INTEGER)
			</delete>

            
## 💡 [SELECT] - 메뉴 수정 클릭 시 해당 데이터 값 호출(doListOne), ★ UPDATE를 위한 용도 ★

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 수정 클릭 시 href에 /menu_up?no=1 받게 설정
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
				  <td>Chk</td>
				  <td th:text="${prod.get('no')}">커피No</th>
				  <td th:text="${prod.get('coffee')}">메뉴명</td>
				  <td th:text="${prod.get('kind')}">종류</td>
				  <td th:text="${prod.get('price')}">가격</td>
				  <td th:text="${prod.get('reg_day')}">등록일</td>
				  <td th:text="${prod.get('mod_day')}">수정일</td>
				  <td><a th:href="@{/menu_up(no=${prod.get('no')})}">수정</a></td>
				  <td><a th:href="@{/menu_del(no=${prod.get('no')})}">삭제</a></td>
				</tr>


	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
		
			/* [SELECT] - 수정 클릭 시 해당 데이터 값 호출(doListOne), UPDATE를 위한 용도 */
			@GetMapping("/menu_up")
			public String doUpdate(Model model, @RequestParam("no") String strNo) {

				Map<String, Object> map = menuSvc.doListOne(strNo);
				
				model.addAttribute("map", map);

				return "/menu/menu_up"; 
			}         
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
			
			
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [SELECT] - 수정 클릭 시 해당 데이터 값 호출(doListOne), UPDATE를 위한 용도 */
			public Map<String, Object> doListOne(String strNo) {
				Map<String, Object> map = menuDao.doListOne(strNo);

				return map;
			}    
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java
		
			@Mapper
			public interface MenuDao {

				/* [SELECT] - 수정 클릭 시 해당 데이터 값 호출(doListOne), UPDATE를 위한 용도 */
				Map<String, Object> doListOne(String strNo);
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [SELECT] - 수정 클릭 시 해당 데이터 값 호출(doListOne), UPDATE를 위한 용도 -->
			<!-- resultType는 Dao의 type: map -->
			<!-- Map<String, Object> doListOne(String strNo); 에서 type은 map -->
			<select id="doListOne" resultType="map">
				SELECT no, coffee, kind, price,
					DATE_FORMAT(reg_day, '%Y-%m-%d') AS reg_day,
					DATE_FORMAT(mod_day, '%Y-%m-%d') AS mod_day
					FROM coffee_menu
					where no = CAST(#{strNo} as INTEGER)
			</select>


## 💡 [UPDATE] - 메뉴 수정 

	a. html 
		a. /src/main/resources/templates/menu/menu_up.html
			- 수정 > 메뉴 수정 클릭 시 수정 되게끔 하기 위함
			
				<!-- map으로 사용했기 때문에 map.get('변수명')으로 값을 가져옴  -->
				<form name="fm_menu_ins" autocomplete="on" action="/menu_up" method="post">
				  <fieldset>
			
					<legend> [커피 메뉴 등록] </legend>
					<label>메뉴명</label> <input type="text" id="name" name="coffee" th:value="${map.get('coffee')}"></p>
					<label>종 류 </label><select name="kind">
										<option value="커피" th:selected="${map.get('kind')} == '커피'">커피</option>
										<option value="논커피" th:selected="${map.get('kind')} == '논커피'">논커피</option>
										<option value="에이드" th:selected="${map.get('kind')} == '에이드'">에이드</option>
									  </select>
									  </p>
					&nbsp;&nbsp;
					<label>가 격 </label><input type="number" name="price" th:value="${map.get('price')}"></p>
					<input type="hidden" name="coffee_id" th:value="${map.get('no')}">
			
					<input type="submit" value="메뉴 수정" style="width: 100px;height: 30px;font-weight: bold; font-size: medium">
				  </fieldset>
				</form>
				
				<input type="hidden" name="no" th:value="${map.get('no')}">


	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
		
			/* [UPDATE] - 메뉴 수정 */
			@PostMapping("/menu_up")
			public String doUpdatePost(
					@RequestParam("no") String strNo, 
					@RequestParam("coffee") String strCoffee, 
					@RequestParam("kind") String strKind, 
					@RequestParam("price") String strPrice )    
			{
				int intI = menuSvc.doUpdate(strNo, strCoffee, strKind, strPrice);
				return "redirect:/menu"; // return은 @RequestMapping이 적용되지 않는다.
			}      
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
		 
		 
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [UPDATE] - 메뉴 수정 */
			public int doUpdate(String strNo, String strCoffee, String strKind, String strPrice) {
				int intI = menuDao.doUpdate(strNo, strCoffee, strKind, strPrice);
				return intI;
			}    
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java
		
			@Mapper
			public interface MenuDao {
				
				/* [UPDATE] - 메뉴 수정 */
				int doUpdate(@Param("strNo") String no, @Param("strCoffee") String coffee, @Param("strKind") String kind, @Param("strPrice") String price);
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [UPDATE] - 메뉴 수정  --> 
			<update id="doUpdate">
			   Update coffee_menu
			   Set
				   coffee = #{strCoffee},
				   kind = #{strKind},
				   price = CAST(#{strPrice} as INTEGER)
			   Where no = CAST(#{strNo} as INTEGER)
		   </update>
           
		   
## 💡 [SELECT] - 메뉴 검색 조건에 의한 조회(Search)

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 검색 조건 입력 후 조회 버튼 클릭 시 해당 값만 나오게 하기 위함
			
				<!-- Post 방식으로 받으며 action에 Controller Mapping 값으로 설정(/src/main/java/com/boot/sailing/controller/MenuCon.java) -->
				<!-- name들은 데이터베이스에서 지정한 컬럼 값 그대로 사용해야 함 -->    
				<form name="fm_menu" autocomplete="on" action="/menu_search" method="post">
				  <fieldset>

					<legend> [검색조건] </legend>
					<label>등록기간</label><input type="date" id="start_date" name="start_date" min="2020-01-01" max="2023-12-31">
					<input type="date" id="end_date" name="end_date" min="2020-01-01" max="2023-12-31">
					&nbsp;&nbsp;
					<label>메뉴명</label> <input type="text" id="coffee" name="coffee">
					&nbsp;&nbsp;
					<label>종류</label> <select id="kind" name="kind">
					<option value="ALL">전체</option>
					<option value="커피">커피</option>
					<option value="논커피">논커피</option>
					<option value="에이드">에이드</option>
				  </select>
				  </fieldset>
				</form>    
		
		b. /src/main/resources/templates/menu/menu.html
			- start_date, end_date 시간 설정을 위한 javascript 사용
			* 꼭 </form> 태그 아래에 사용해야 설정 됨
			
				<script>
					/* 현재 시간 날짜에 적용시키기 */
					const now = new Date();    // 현재 날짜 및 시간
					const time7 = new Date(now.setDate(now.getDate() - 100));    // 기간 설정
					document.getElementById("start_date").value= time7.toISOString().slice(0,10);
					document.getElementById("end_date").value= new Date().toISOString().slice(0,10);
				</script>
			
		
		c. /src/main/resources/templates/menu/menu.html
			- MenuCon에서 model.addAttribute("list", list); 로 데이터를 넘겨준 값을 뿌려줌
			
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
				  <td>Chk</td>
				  <td th:text="${prod.get('no')}">커피No</th>
				  <td th:text="${prod.get('coffee')}">메뉴명</td>
				  <td th:text="${prod.get('kind')}">종류</td>
				  <td th:text="${prod.get('price')}">가격</td>
				  <td th:text="${prod.get('reg_day')}">등록일</td>
				  <td th:text="${prod.get('mod_day')}">수정일</td>
				  <td><a th:href="@{/menu_up(no=${prod.get('no')})}">수정</a></td>
				  <td><a th:href="@{/menu_del(no=${prod.get('no')})}">삭제</a></td>
				</tr>


	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
		
			/*
			 * [SELECT] - 검색 기능(Search)
			 * 해당 검색 결과만 받기 위하여 List<Map<String, Object>> list 사용
			 * Model model로 menu.html에 있는 <tr th:each="prod : ${list}">을 뿌려주기 위해 list로 넘겨줌
			 */
			@PostMapping("/menu_search")
			public String doSearch(
					@RequestParam("start_date") String strStartDate, 
					@RequestParam("end_date") String strEndDate, 
					@RequestParam(value = "coffee", defaultValue = "ALL") String strCoffee,  /* null이 올수 있는 경우에 defaultValue = "ALL"를 넣어주면 좋다. */
					@RequestParam("kind") String strKind,
					Model model)    
			{
				log.info("==========================================================");
				log.info("start_date:" + strStartDate);
				List<Map<String, Object>> list = menuSvc.doSearch(strStartDate, strEndDate, strCoffee, strKind);
				model.addAttribute("list", list);
				return "/menu/menu"; 
			}
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
			
			
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [SELECT] - 검색 기능(Search) */
			public List<Map<String, Object>> doSearch(String strStartDate, String strEndDate, String strCoffee, String strKind) {
				
				List<Map<String, Object>> list = menuDao.doSearch(strStartDate, strEndDate, strCoffee, strKind);
				return list;
			}
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java
		
			@Mapper
			public interface MenuDao {
				
				/* [SELECT] - 검색 기능(Search) */
				List<Map<String, Object>> doSearch(@Param("strStartDate") String start_date, @Param("strEndDate") String end_date, @Param("strCoffee") String coffee, @Param("strKind") String kind);

			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [SELECT] - 메뉴 검색 조건에 의한 조회(Search) -->
			<!-- id는 Dao의 메소드 이름: doSearch -->
			<!-- List<Map<String, Object>> doSearch(String strStartDate, String strEndDate, String strCoffee, String strKind) 에서 type은 map -->
			<!--  WHERE 1=1은 TRUE 값을 일단 넘겨줌(AND) -->
			<!--
			a.  <![CDATA[   ]]> : xml 파싱에 관여하지 않도록 처리(열고 닫아주면 됨)
			b.  <   : &lt;
			c.  >   : &gt;
			-->
			<select id="doSearch" resultType="map">
				SELECT NO, coffee, kind, price,
						DATE_FORMAT(reg_day, '%Y-%m-%d') AS reg_day,
						DATE_FORMAT(mod_day, '%Y-%m-%d') AS mod_day
				FROM coffee_menu
				WHERE 1=1
				AND reg_day >= DATE_FORMAT(#{strStartDate},'%Y%m%d')
				AND reg_day &lt; DATE_ADD(DATE_FORMAT(#{strEndDate},'%Y%m%d'),INTERVAL +1 DAY) # +1일 한 이유는 2023-06-18 까지 나와야 하기 때문
				<!-- MenuCon.java > @RequestParam(value = "coffee", defaultValue = "ALL") String strCoffee에서 defaultValue를 null 대신 적어줌 -->
				<if test="strCoffee != 'ALL'">
					AND coffee LIKE CONCAT(#{strCoffee}, '%')
				</if>
				<if test="strKind != 'ALL'">
					AND kind = #{strKind}
				</if>
			</select>
			

## 💡 [UPDATE] - 다중 가격 데이터 수정(체크박스), [INSERT] - 수정한 가격 데이터 등록

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 체크 박스 기능 부여 후 다중 데이터 처리를 하기 위함
			
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
					<td><input type="checkBox" name="chkCoffeeNo" th:value="${prod.get('no')}"></td>
		
		b. /src/main/resources/templates/menu/menu.html
			- form tag로 table를 감싸줌(action에 값을 부여하여 컨트롤러에서 행위하기 위함)
			
				<!-- Post 방식으로 받으며 action에 Controller Mapping 값으로 설정(/src/main/java/com/boot/sailing/controller/MenuCon.java) -->
				<!-- name들은 데이터베이스에서 지정한 컬럼 값 그대로 사용해야 함 -->   
				<form name="formTable" id="IdFormTable" method="post" action="/ "> 
				<table class="table">
				<thead>                 
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
				  <td><input type="checkBox" name="chkCoffeeNo" th:value="${prod.get('no')}"></td>
				  <td th:text="${prod.get('no')}">커피No</th>
				  <td th:text="${prod.get('coffee')}">메뉴명</td>
				  <td th:text="${prod.get('kind')}">종류</td>
				  <td th:text="${prod.get('price')}">가격</td>
				  <td th:text="${prod.get('reg_day')}">등록일</td>
				  <td th:text="${prod.get('mod_day')}">수정일</td>
				  <td><a th:href="@{/menu_up(no=${prod.get('no')})}">수정</a></td>
				  <td><a th:href="@{/menu_del(no=${prod.get('no')})}">삭제</a></td>
				</tr>
				  
				</tbody>
				</table>
				</form> 
				

	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
			
			/*
			 * [UPDATE] - 다중 가격 데이터 수정
			 * [INSERT] - 수정한 가격 데이터 등록
			 * menu.html 에서 <td><input type="checkBox" name="chkCoffeeNo" th:value="${prod.get('no')}"></td> 의 name값을 @RequestParam 적음
			 * menu.html 에서 <input type="hidden" name="hidden_price">의 name값을 @RequestParam 적음
			 */
			@PostMapping("/menu_updatePrice")
			public String doUpdatePrice(@RequestParam("chkCoffeeNo") List<String> chkList, @RequestParam("hidden_price") String strPrice) {
				
				if(chkList != null) {
					// for(변수 선언(type 변수명) : 배열)
					for(String strNo : chkList) {
						
						int int1 = menuSvc.doUpdatePrice(strNo, strPrice); // [UPDATE] - 다중 가격 데이터 수정
						int int2 = menuSvc.doInsertLog(strNo, strPrice); // [INSERT] - 수정한 가격 데이터 등록
					}
				}
					
				return "redirect:/menu";
			}
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
			
			
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [UPDATE] - 다중 가격 데이터 수정 */
			public int doUpdatePrice(String strNo, String strPrice) {
				int int1 = menuDao.doUpdatePrice(strNo, strPrice);
				return int1;
			}

			/* [INSERT] - 수정한 가격 데이터 등록 */
			public int doInsertLog(String strNo, String strPrice) {
				int int2 = menuDao.doInsertLog(strNo, strPrice);
				return int2;
			}
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java
		
			@Mapper
			public interface MenuDao {
				
				/* [UPDATE] - 다중 가격 데이터 수정 */
				int doUpdatePrice(@Param("strNo") String no, @Param("strPrice") String price);
				
				/* [INSERT] - 수정한 가격 데이터 등록 */
				int doInsertLog(@Param("strNo") String no, @Param("strPrice") String price);
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [UPDATE] - 다중 가격 데이터 수정 --> 
			<!-- id는 Dao의 메소드 이름: doSearch -->
			<update id="doUpdatePrice">
				  Update coffee_menu
				  SET
					price = CAST(#{strPrice} as INTEGER)
				  Where no = CAST(#{strNo} as INTEGER)
			</update>
		   
			
			<!-- [INSERT] - 가격 로그 데이터 등록 --> 
			<!-- id는 Dao의 메소드 이름: doInsertLog -->
			<insert id="doInsertLog">
				INSERT INTO log (coffee_no, price)
				VALUES (#{strNo}, CAST(#{strPrice} as INTEGER))
			</insert>


## 💡 원 쿼리(한 번에 처리) - [UPDATE] - 다중 가격 데이터 수정(체크박스), [INSERT] - 수정한 가격 데이터 등록

	a. html 
		a. /src/main/resources/templates/menu/menu.html
			- 체크 박스 기능 부여 후 다중 데이터 처리를 하기 위함
			
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
					<td><input type="checkBox" name="chkCoffeeNo" th:value="${prod.get('no')}"></td>
		
		b. /src/main/resources/templates/menu/menu.html
			- form tag로 table를 감싸줌(action에 값을 부여하여 컨트롤러에서 행위하기 위함)
			
				<!-- Post 방식으로 받으며 action에 Controller Mapping 값으로 설정(/src/main/java/com/boot/sailing/controller/MenuCon.java) -->
				<!-- name들은 데이터베이스에서 지정한 컬럼 값 그대로 사용해야 함 -->   
				<form name="formTable" id="IdFormTable" method="post" action="/ "> 
				<table class="table">
				<thead>                 
				<!--MenuCon에 list에 넣은 값을 호출 -->
				<!-- Thymeleaf - for loop -->      
				<tr th:each="prod : ${list}">
				  <td><input type="checkBox" name="chkCoffeeNo" th:value="${prod.get('no')}"></td>
				  <td th:text="${prod.get('no')}">커피No</th>
				  <td th:text="${prod.get('coffee')}">메뉴명</td>
				  <td th:text="${prod.get('kind')}">종류</td>
				  <td th:text="${prod.get('price')}">가격</td>
				  <td th:text="${prod.get('reg_day')}">등록일</td>
				  <td th:text="${prod.get('mod_day')}">수정일</td>
				  <td><a th:href="@{/menu_up(no=${prod.get('no')})}">수정</a></td>
				  <td><a th:href="@{/menu_del(no=${prod.get('no')})}">삭제</a></td>
				</tr>
				  
				</tbody>
				</table>
				</form> 
				

	b. Controller
		- /src/main/java/com/boot/sailing/controller/MenuCon.java
			
			/*
			 * 한번에 하나만 효율적으로 사용 
			 * [UPDATE] - 다중 가격 데이터 수정(원 쿼리 - 1번에 처리하는 것을 뜻함)
			 * [INSERT] - 수정한 가격 데이터 등록(원 쿼리 - 1번에 처리하는 것을 뜻함)
			 * menu.html 에서 <td><input type="checkBox" name="chkCoffeeNo" th:value="${prod.get('no')}"></td> 의 name값을 @RequestParam 적음
			 * menu.html 에서 <input type="hidden" name="hidden_price">의 name값을 @RequestParam 적음
			 */
			@PostMapping("/menu_updatePrice")
			public String doUpdatePrice(@RequestParam("chkCoffeeNo") List<String> chkList, @RequestParam("hidden_price") String strPrice) {
				
				int int1 = menuSvc.doUpdatePriceOne(chkList, strPrice);
				int int2 = menuSvc.doInsertLogOne(chkList, strPrice);
			
				return "redirect:/menu";
			}
			
		* 이제 Controller > Service로 접근해야 하니 여기서는 menuSvc.doInsert()로 설정한다.
			
			
	c. Serivce
		- /src/main/java/com/boot/sailing/service/MenuSvc.java
		
			/* [UPDATE] - 다중 가격 데이터 수정(원 쿼리 - 1번에 처리하는 것을 뜻함) */
			public int doUpdatePriceOne(List<String> chkList, String strPrice) {
				int int1 = menuDao.doUpdatePriceOne(chkList, strPrice);         
				return int1;
			}
			
			/* [INSERT] - 수정한 가격 데이터 등록(원 쿼리 - 1번에 처리하는 것을 뜻함) */
			public int doInsertLogOne(List<String> chkList, String strPrice) {
				int int2 = menuDao.doInsertLogOne(chkList, strPrice);     
				return int2;
			}
		
		* 이제 Service > Dao로 접근해야 하니 여기서는 menuDao.doInsert()로 설정한다.
		
		
	d. Dao
		- /src/main/java/com/boot/sailing/dao/MenuDao.java
		
			@Mapper
			public interface MenuDao {
				
				/* [UPDATE] - 다중 가격 데이터 수정(원 쿼리 - doUpdatePriceOne) */
				int doUpdatePriceOne(@Param("chkList") List<String> chkCoffeeNo, @Param("strPrice") String price);

				/* [INSERT] - 수정한 가격 데이터 등록(원 쿼리 - doInsertLogOne) */
				int doInsertLogOne(@Param("chkList") List<String> chkCoffeeNo, @Param("strPrice") String price);
			}
		
		* 이제 Dao > Mapper로 접근하면 된다


	e. Mapper
		- /src/main/resources/sqlmapper/CoffeeMenu.xml
		
			<!-- [UPDATE] - 다중 가격 데이터 수정(원 쿼리 - 1번에 처리하는 것을 뜻함) -->
			<!-- id는 Dao의 메소드 이름: doUpdatePriceOne -->
			<update id="doUpdatePriceOne">
				  Update coffee_menu
				  SET
					  price = CAST(#{strPrice} as INTEGER)
				  <!-- collection은     int doUpdatePriceOne(List<String> chkList, String strPrice); 에서의 chkList를 뜻함 -->
				  <!-- open="ID in -> open="no in -->
				  <where>
					  <foreach item="item" index="index" collection="chkList" open="no in (" separator="," close=")" nullable="true">
						   #{item}
					  </foreach>
				  </where>
			</update>
		   
			
			<!-- [INSERT] - 수정한 가격 데이터 등록(원 쿼리 - 1번에 처리하는 것을 뜻함) -->
			<!-- id는 Dao의 메소드 이름: doInsertLogOne -->
			<insert id="doInsertLogOne">
				INSERT INTO log (coffee_no, price)
				<foreach item="item" index="index" collection="chkList" separator=" UNION ALL " nullable="true">
					 SELECT #{item}, CAST(#{strPrice} as INTEGER) FROM DUAL
				</foreach>
			</insert>