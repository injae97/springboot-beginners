<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace = Dao 위치 -->  
<mapper namespace="com.boot.sailing.dao.MenuDao">

	<!-- [SELECT] - 메뉴 전체 조회 -->
	<!-- id는 Dao의 메소드 이름: doList -->
	<!-- resultType는 Dao의 type: map -->
	<!-- List<Map<String, Object>> doList(); 에서 type은 map -->
    <select id="doList" resultType="com.boot.sailing.vo.Coffee_menu">
        SELECT no, coffee, kind, price,
        DATE_FORMAT(reg_day,'%Y.%m.%d') AS reg_day,
        DATE_FORMAT(mod_day,'%Y.%m.%d') AS mod_day
        FROM coffee_menu
	</select>
	
	
  	<!-- [INSERT] - 메뉴 등록  -->
	<!-- id는 Dao의 메소드 이름: doInsert -->
    <insert id="doInsert">
        INSERT INTO coffee_menu (coffee, kind, price)
        VALUES(#{strCoffee}, #{strKind}, CAST(#{strPrice} as INTEGER))
    </insert>
	
	
  	<!-- [DELETE] - 메뉴 삭제  -->
	<!-- id는 Dao의 메소드 이름: doDelete -->
    <delete id="doDelete">
        DELETE FROM coffee_menu where no = CAST(#{strNo} as INTEGER)
    </delete>
    
    
   	<!-- [SELECT] - 수정 클릭 시 해당 데이터 값 호출(doListOne), UPDATE를 위한 용도 -->
	<!-- resultType는 Dao의 type: map -->
	<!-- Map<String, Object> doListOne(String strNo); 에서 type은 map -->
	<select id="doListOne" resultType="map">
		SELECT no, coffee, kind, price,
		    DATE_FORMAT(reg_day, '%Y-%m-%d') AS reg_day,
		    DATE_FORMAT(mod_day, '%Y-%m-%d') AS mod_day
		    FROM coffee_menu
		    where no = CAST(#{strNo} as INTEGER)
	</select>
	
	
	<!-- [UPDATE] - 메뉴 수정  --> 
    <update id="doUpdate">
       Update coffee_menu
       Set
           coffee = #{strCoffee},
           kind = #{strKind},
           price = CAST(#{strPrice} as INTEGER)
       Where no = CAST(#{strNo} as INTEGER)
   </update>
   
   
	<!-- [SELECT] - 메뉴 검색 조건에 의한 조회(Search) -->
	<!-- id는 Dao의 메소드 이름: doSearch -->
	<!-- List<Map<String, Object>> doSearch(String strStartDate, String strEndDate, String strCoffee, String strKind) 에서 type은 map -->
	<!--  WHERE 1=1은 TRUE 값을 일단 넘겨줌(AND) -->
	<!--
	a.  <![CDATA[   ]]> : xml 파싱에 관여하지 않도록 처리(열고 닫아주면 됨)
	b.  <   : &lt;
	c.  >   : &gt;
	-->
	<select id="doSearch" resultType="com.boot.sailing.vo.Coffee_menu">
		SELECT NO, coffee, kind, price,
				DATE_FORMAT(reg_day, '%Y-%m-%d') AS reg_day,
				DATE_FORMAT(mod_day, '%Y-%m-%d') AS mod_day
		FROM coffee_menu
		WHERE 1=1
		AND reg_day >= DATE_FORMAT(#{strStartDate},'%Y%m%d')
		AND reg_day &lt; DATE_ADD(DATE_FORMAT(#{strEndDate},'%Y%m%d'),INTERVAL +1 DAY) # +1일 한 이유는 2023-06-18 까지 나와야 하기 때문
		<!-- MenuCon.java > @RequestParam(value = "coffee", defaultValue = "ALL") String strCoffee에서 defaultValue를 null 대신 적어줌 -->
		<if test="strCoffee != 'ALL'">
			AND coffee LIKE CONCAT(#{strCoffee}, '%')
		</if>
		<if test="strKind != 'ALL'">
			AND kind = #{strKind}
		</if>
	</select>
	
	
	<!-- [UPDATE] - 다중 가격 데이터 수정 --> 
	<!-- id는 Dao의 메소드 이름: doSearch -->
	<update id="doUpdatePrice">
	      Update coffee_menu
	      SET
	   		price = CAST(#{strPrice} as INTEGER)
	      Where no = CAST(#{strNo} as INTEGER)
	</update>
   
	
	<!-- [INSERT] - 가격 로그 데이터 등록 --> 
	<!-- id는 Dao의 메소드 이름: doInsertLog -->
    <insert id="doInsertLog">
        INSERT INTO coffee_menu_log (coffee_no, price)
        VALUES (#{strNo}, CAST(#{strPrice} as INTEGER))
    </insert>	
	
	
		
	<!-- [UPDATE] - 다중 가격 데이터 수정(원 쿼리 - 1번에 처리하는 것을 뜻함) -->
	<!-- id는 Dao의 메소드 이름: doUpdatePriceOne -->
	<update id="doUpdatePriceOne">
	      Update coffee_menu
	      SET
	   	      price = CAST(#{strPrice} as INTEGER)
	   	  <!-- collection은 	int doUpdatePriceOne(List<String> chkList, String strPrice); 에서의 chkList를 뜻함 -->
 	  	  <!-- open="ID in -> open="no in -->
          <where>
              <foreach item="item" index="index" collection="chkList" open="no in (" separator="," close=")" nullable="true">
                   #{item}
              </foreach>
          </where>
	</update>
   
	
	<!-- [INSERT] - 수정한 가격 데이터 등록(원 쿼리 - 1번에 처리하는 것을 뜻함) -->
	<!-- id는 Dao의 메소드 이름: doInsertLogOne -->
    <insert id="doInsertLogOne">
        INSERT INTO coffee_menu_log (coffee_no, price)
        <foreach item="item" index="index" collection="chkList" separator=" UNION ALL " nullable="true">
             SELECT #{item}, CAST(#{strPrice} as INTEGER) FROM DUAL
        </foreach>
    </insert>	

</mapper>